#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# shellcheck disable=SC1090
. "$DIR"/../git-shmart

append_and_commit_readme_remotely() {
  echo "foo" >> README
  git add .
  git commit -qm "remote changes"
}

append_and_commit_readme_locally() {
  echo "foo" >> README
  git add .
  git commit -qm "local changes"
}

append_and_commit_codes() {
  echo "foo" >> lib/codes
  git add .
  git commit -qm "local changes"
}

it_does_nothing_when_up_to_date() {
  EXPECTED="Executing: git fetch origin
Neither your local branch 'master', nor the remote branch 'origin/master' have moved on.
Already up-to-date."
  assertEquals "$EXPECTED" "$(shmart_pull)"
}

it_warns_when_not_in_a_git_repo() {
  rm -rf .git
  EXPECTED="You need to run this from within a Git directory.
Current working directory: $(pwd)"
  assertEquals "$EXPECTED" "$(shmart_pull)"
}

it_reports_no_remote_changes_and_one_local_change() {
  append_and_commit_readme_locally
  EXPECTED="Executing: git fetch origin
You have 1 new commit on 'master'.
Remote branch 'origin/master' has not moved on.
Already up-to-date."
  assertEquals "$EXPECTED" "$(shmart_pull)"
}

it_reports_no_remote_changes_and_many_local_changes() {
  append_and_commit_readme_locally
  append_and_commit_readme_locally
  EXPECTED="Executing: git fetch origin
You have 2 new commits on 'master'.
Remote branch 'origin/master' has not moved on.
Already up-to-date."
  assertEquals "$EXPECTED" "$(shmart_pull)"
}

# shellcheck disable=SC2016
it_fast_forwards_remote_changes() {
  (cd ../remote && append_and_commit_readme_remotely)

  # shellcheck disable=SC2034
  A=$(shmart_pull)

  assertTrue 'reports fetch' \
    '[[ $A =~ "Executing: git fetch origin" ]]'
  assertTrue 'reports new commit' \
    '[[ $A =~ "There is 1 new commit on '\''origin/master'\''." ]]'
  assertTrue 'reports not moved on' \
    '[[ $A =~ "Local branch '\''master'\'' has not moved on. Fast-forwarding..." ]]'
  assertTrue 'reports fast-forward' \
    '[[ $A =~ "Executing: git merge --ff-only origin/master" ]]'
}

# shellcheck disable=SC2016
it_does_not_stash_before_fast_forward_with_untracked_files() {
  (cd ../remote && append_and_commit_readme_remotely)
  echo "foo" > foo
  assertEquals "?? foo" "$(git status --short)"

  # shellcheck disable=SC2034
  A=$(shmart_pull)

  assertTrue 'reports fast-forward' \
    '[[ $A =~ "Executing: git merge --ff-only origin/master" ]]'
  assertTrue 'reports changeset' \
    '[[ $A =~ "1 file changed, 1 insertion(+)" ]]'
  assertEquals "?? foo" "$(git status --short)"
}

# shellcheck disable=SC2016
it_stashes_fast_forwards_and_pops_with_local_and_remote_changes() {
  (cd ../remote && append_and_commit_readme_remotely)
  echo "foo" > foo
  echo "bar" >> lib/codes
  git add foo
  EXPECTED="A  foo
 M lib/codes"
  assertEquals "$EXPECTED" "$(git status --short)"

  # shellcheck disable=SC2034
  A=$(shmart_pull)

  assertTrue 'reports dirty index' \
    '[[ $A =~ "Working directory dirty. Stashing..." ]]'
  assertTrue 'reports stash' \
    '[[ $A =~ "Executing: git stash" ]]'
  assertTrue 'reports fast-forward' \
    '[[ $A =~ "Executing: git merge --ff-only origin/master" ]]'
  assertTrue 'reports changeset' \
    '[[ $A =~ "1 file changed, 1 insertion(+)" ]]'
  assertTrue 'reports intent to reapply local changes' \
    '[[ $A =~ "Reapplying local changes..." ]]'
  assertTrue 'reports pop' \
    '[[ $A =~ "Executing: git stash pop" ]]'
  assertEquals "$EXPECTED" "$(git status --short)"
}

# shellcheck disable=SC2016
it_rebases_diverged_branches() {
  (cd ../remote && append_and_commit_readme_remotely)
  append_and_commit_codes

  # shellcheck disable=SC2034
  A=$(shmart_pull)

  assertTrue "reports fetch" \
    "[[ \"$A\" =~ 'Executing: git fetch origin' ]]"
  assertTrue "reports new remote commit" \
    "[[ \"$A\" =~ 'There is 1 new commit' ]]"
  assertTrue 'reports new local commit' \
    '[[ $A =~ "You have 1 new commit on" ]]'
  assertTrue 'reports need for rebase' \
    '[[ $A =~ "Both local and remote branches have moved on." ]]'
  assertTrue 'reports rebase' \
    '[[ $A =~ "Executing: git rebase -p origin/master" ]]'
  assertTrue 'reports successful rebase' \
    '[[ $A =~ "Successfully rebased and updated refs/heads/master." ]]'
  assertEquals "local changes remote changes first" "$(git log --pretty=format:%s | xargs)"
}

#it_does_not_stash_before_rebase_with_untracked_files() {
  #true
#}

#it_stashes_rebases_and_pops_with_local_uncommited_changes() {
  #true
#}

#it_pulls_a_repo_containing_a_submodule() {
  #true
#}

#it_pulls_a_submodule() {
  #true
#}

# shellcheck disable=SC1090
. "$DIR"/test_helper
